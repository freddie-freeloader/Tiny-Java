-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A compiler for a subset of Java
--   
--   This compiler was programmed a part of the "Compilerbau" seminar by
--   Prof. Martin Pl√ºmicke.
@package tiny-java
@version 0.0.0


-- | This module contains definitions and some useful helpers for
--   <a>Compiler.Parser</a>
module Compiler.ParserUtils
type Parser = Parsec Void String

-- | <a>makeSingleton</a> puts the result of a parser into an array
makeSingleton :: Parser a -> Parser [a]

-- | <a>spaceConsumer</a> consumes spaces and comments
spaceConsumer :: Parser ()

-- | <a>lexeme</a> is a wrapper for lexemes that consumes all spaces and
--   comments after a lexeme
lexeme :: Parser a -> Parser a

-- | Symbol
symbol :: String -> Parser String

-- | <a>parens</a> parses something between parenthesis.
parens :: Parser a -> Parser a

-- | <a>braces</a> parses something between parenthesis.
braces :: Parser a -> Parser a

-- | <a>integer</a> parses an integer.
integer :: Parser Integer

-- | <a>semicolon</a> parses a semicolon.
semicolon :: Parser ()

-- | <a>comma</a> parses a comma.
comma :: Parser ()

-- | <a>kword</a> parses a reserved word (keyword).
kword :: String -> Parser ()

-- | <a>binOp</a> defines recursive binary operation with a different
--   parser for the left side.
binOp :: String -> (a -> a -> a) -> Parser a -> Parser a


-- | This module contains the AST
module Compiler.Ast
data Class
Class :: Name -> [Mod] -> [Decl] -> Class
newtype Name
Name :: String -> Name
data Identifier
Identifier :: [Name] -> Name -> Identifier
[$sel:path:Identifier] :: Identifier -> [Name]
[$sel:getName:Identifier] :: Identifier -> Name
voidType :: Identifier
type Type = Identifier

-- | <a>VarDecl</a> is used for field definitions and local variable
--   declarations
data VarDecl
VarDecl :: Name -> [Mod] -> Type -> (Maybe Expression) -> VarDecl
[$sel:getName:VarDecl] :: VarDecl -> Name
[$sel:getMods:VarDecl] :: VarDecl -> [Mod]
[$sel:getType:VarDecl] :: VarDecl -> Type
[$sel:getRHS:VarDecl] :: VarDecl -> (Maybe Expression)
data Expression
TernaryIf :: Expression -> Expression -> Expression -> Expression
If :: Expression -> Expression -> (Maybe Expression) -> Expression
While :: Expression -> Expression -> Expression
[$sel:getCond:TernaryIf] :: Expression -> Expression
[$sel:getBody:TernaryIf] :: Expression -> Expression
Assign :: AssignOp -> Identifier -> Expression -> Expression

-- | Primitive binary Operation
PrimBinOp :: BinOp -> Expression -> Expression -> Expression

-- | Primitive unary Operation
PrimUnOp :: UnOp -> Expression -> Expression

-- | this keyword
This :: Expression

-- | Using new
Instantiation :: Identifier -> [Expression] -> Expression
Iden :: Identifier -> Expression
Select :: Expression -> Name -> Expression
Apply :: Expression -> [Expression] -> Expression
Literal :: Lit -> Expression
LocalVar :: VarDecl -> Expression
Block :: [Expression] -> Expression
EmptyStmt :: Expression
Return :: (Maybe Expression) -> Expression
data Lit
IntegerL :: Integer -> Lit
BooleanL :: Bool -> Lit
CharL :: Char -> Lit
StringL :: String -> Lit
Null :: Lit
data AssignOp
NormalAssign :: AssignOp
MultiplyAssign :: AssignOp
DivideAssign :: AssignOp
ModuloAssign :: AssignOp
PlusAssign :: AssignOp
MinusAssign :: AssignOp
ShiftLeftAssign :: AssignOp
SignedShiftRightAssign :: AssignOp
USignedShiftRightAssign :: AssignOp
AndAssign :: AssignOp
XOrAssign :: AssignOp
OrAssign :: AssignOp
data BinOp
And :: BinOp
Or :: BinOp
XOr :: BinOp
Eq :: BinOp
Less :: BinOp
LessEq :: BinOp
Greater :: BinOp
GreaterEq :: BinOp
InstanceOf :: BinOp
Multiply :: BinOp
Divide :: BinOp
Add :: BinOp
Subtract :: BinOp
Modulo :: BinOp
data UnOp
Not :: UnOp
Neg :: UnOp
PreIncr :: UnOp
PostIncr :: UnOp
PreDecr :: UnOp
PostDecr :: UnOp

-- | Tilde-Operator performs a bitwise complement
BitCompl :: UnOp
data Decl
Field :: VarDecl -> Decl
Constructor :: Decl
Method :: Name -> [Mod] -> Type -> [(Type, Name)] -> Maybe Expression -> Decl
[$sel:getName:Field] :: Decl -> Name
[$sel:getMods:Field] :: Decl -> [Mod]
[$sel:getReturnType:Field] :: Decl -> Type
[$sel:getParamList:Field] :: Decl -> [(Type, Name)]
[$sel:getBody:Field] :: Decl -> Maybe Expression
data Mod
Public :: Mod
Protected :: Mod
Private :: Mod
Static :: Mod
Abstract :: Mod
instance GHC.Classes.Eq Compiler.Ast.Class
instance GHC.Show.Show Compiler.Ast.Class
instance GHC.Classes.Eq Compiler.Ast.Decl
instance GHC.Show.Show Compiler.Ast.Decl
instance GHC.Classes.Eq Compiler.Ast.Expression
instance GHC.Show.Show Compiler.Ast.Expression
instance GHC.Classes.Eq Compiler.Ast.VarDecl
instance GHC.Show.Show Compiler.Ast.VarDecl
instance GHC.Classes.Eq Compiler.Ast.Mod
instance GHC.Show.Show Compiler.Ast.Mod
instance GHC.Classes.Eq Compiler.Ast.UnOp
instance GHC.Show.Show Compiler.Ast.UnOp
instance GHC.Classes.Eq Compiler.Ast.BinOp
instance GHC.Show.Show Compiler.Ast.BinOp
instance GHC.Classes.Eq Compiler.Ast.AssignOp
instance GHC.Show.Show Compiler.Ast.AssignOp
instance GHC.Classes.Eq Compiler.Ast.Lit
instance GHC.Show.Show Compiler.Ast.Lit
instance GHC.Classes.Eq Compiler.Ast.Identifier
instance GHC.Show.Show Compiler.Ast.Identifier
instance GHC.Classes.Eq Compiler.Ast.Name
instance GHC.Show.Show Compiler.Ast.Name


-- | This module contains the complete parser
module Compiler.Parser

-- | <a>mods</a> is a list of available modifiers
mods :: [(Mod, String)]

-- | <a>kwords</a> is a list of reserved words (keywords).
kwords :: [String]

-- | <a>name</a> parses an name. Names start with a lower case letter.
name :: Parser Name
program :: Parser [Class]

-- | <a>decls</a> parses class declarations
decls :: Parser [Class]
decl :: Parser Class
modifiers :: Parser [Mod]
modifier :: Parser Mod
bodyDecls :: Parser [Decl]
bodyDecl :: Parser [Decl]
fieldDecl :: Parser [Decl]
varDecls :: [Mod] -> Identifier -> Parser [VarDecl]
varDecl :: [Mod] -> Identifier -> Parser VarDecl
expression :: Parser Expression
conditional :: Parser Expression
condOrExpr :: Parser Expression
bOperators :: [[Operator Parser Expression]]
aOperators :: [[Operator Parser Expression]]
unaryExpr :: Parser Expression
castExpr :: Parser Expression
primary :: Parser Expression
literal :: Parser Expression
booleanLit :: Parser Lit
charLit :: Parser Lit
stringLit :: Parser Lit
this :: Parser Expression
instanceCreation :: Parser Expression
classType :: Parser Identifier
identifier :: Parser Identifier
fieldAccess :: Parser Expression
methodInvocation :: Parser Expression
assignment :: Parser Expression
assignmentOp :: Parser AssignOp
constructorDecl :: Parser Decl
methodDecl :: Parser Decl
formalParamList :: Parser [(Type, Name)]
block :: Parser Expression
localVarDecl :: Parser [Expression]
statement :: Parser Expression
ifStmt :: Parser Expression
ifThenStmt :: Parser Expression
statementNoShortIf :: Parser Expression
ifThenStmtNoShortIf :: Parser Expression
whileStmt :: Parser Expression
whileStmtNoShortIf :: Parser Expression
statementWithoutTrailing :: Parser Expression
expressionStmt :: Parser Expression
returnStmt :: Parser Expression
typeIden :: Parser Identifier

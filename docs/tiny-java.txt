-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A compiler for a subset of Java
--   
--   This compiler was programmed a part of the "Compilerbau" seminar by
--   Prof. Martin Pl√ºmicke.
@package tiny-java
@version 0.0.0


-- | This module contains definitions and some useful helpers for
--   <a>Compiler.Parser</a>
module Compiler.ParserUtils

-- | <a>Parser</a> is using Void for custom errors. This might change
--   someday.
type Parser = Parsec Void String

-- | <a>makeSingleton</a> puts the result of a parser into an array
makeSingleton :: Parser a -> Parser [a]

-- | <a>spaceConsumer</a> consumes spaces and comments
spaceConsumer :: Parser ()

-- | <a>lexeme</a> is a wrapper for lexemes that consumes all spaces and
--   comments after a lexeme
lexeme :: Parser a -> Parser a

-- | Symbol
symbol :: String -> Parser String

-- | <a>parens</a> parses something between parenthesis.
parens :: Parser a -> Parser a

-- | <a>braces</a> parses something between parenthesis.
braces :: Parser a -> Parser a

-- | <a>integer</a> parses an integer.
integer :: Parser Integer

-- | <a>semicolon</a> parses a semicolon.
semicolon :: Parser ()

-- | <a>comma</a> parses a comma.
comma :: Parser ()

-- | <a>kword</a> parses a reserved word (keyword).
kword :: String -> Parser ()

-- | <a>binOp</a> defines recursive binary operation with a different
--   parser for the left side.
binOp :: String -> (a -> a -> a) -> Parser a -> Parser a


-- | This module contains the AST
module Compiler.Ast

-- | <a>Identifier</a> is a simple identifier, e.g. for a parameter
newtype Identifier
Identifier :: String -> Identifier

-- | <a>Name</a> represents a Name of something with the relative path to
--   it
data Name
Name :: [Identifier] -> Identifier -> Name
[$sel:path:Name] :: Name -> [Identifier]
[$sel:getIdentifier:Name] :: Name -> Identifier

-- | <a>Type</a> are different types of types
data Type

-- | Represents a primitive java type
PrimType :: PType -> Type

-- | Represents a reference type
RefType :: Name -> Type

-- | Represents the void type in java
JVoid :: Type

-- | <a>PType</a> represent the primitive types
data PType
Boolean :: PType
Int :: PType
Char :: PType

-- | <a>Mod</a> are the different Modifiers in Java
data Mod
Public :: Mod
Protected :: Mod
Private :: Mod
Static :: Mod
Abstract :: Mod

-- | <a>Class</a> is a java class definition
data Class
Class :: Identifier -> [Mod] -> [Decl] -> Class

-- | <a>Decl</a> are the different types of declaration inside a class
data Decl
Field :: VarDecl -> Decl
Constructor :: Decl
Method :: Identifier -> [Mod] -> Type -> [(Type, Identifier)] -> Maybe Statement -> Decl
[$sel:getIdentifier:Field] :: Decl -> Identifier
[$sel:getMods:Field] :: Decl -> [Mod]
[$sel:getReturnType:Field] :: Decl -> Type
[$sel:getParamList:Field] :: Decl -> [(Type, Identifier)]
[$sel:getBody:Field] :: Decl -> Maybe Statement

-- | <a>VarDecl</a> is used for field definitions and local variable
--   declarations
data VarDecl
VarDecl :: Identifier -> [Mod] -> Type -> Maybe Expression -> VarDecl
[$sel:getIdentifier:VarDecl] :: VarDecl -> Identifier
[$sel:getMods:VarDecl] :: VarDecl -> [Mod]
[$sel:getType:VarDecl] :: VarDecl -> Type
[$sel:getRHS:VarDecl] :: VarDecl -> Maybe Expression

-- | <a>Expression</a> is something that can be evaluated to a value
data Expression

-- | Short notation if, e.g. <tt>someBool? 42 : 1337</tt>
TernaryIf :: Expression -> Expression -> Expression -> Expression
[$sel:getCond:TernaryIf] :: Expression -> Expression
[$sel:getElseStmt:TernaryIf] :: Expression -> Expression
[$sel:getThenStmt:TernaryIf] :: Expression -> Expression

-- | Primitive binary Operation
PrimBinOp :: BinOp -> Expression -> Expression -> Expression

-- | Primitive unary Operation
PrimUnOp :: UnOp -> Expression -> Expression

-- | this keyword
This :: Expression

-- | A variable
Iden :: Name -> Expression
Select :: Expression -> Identifier -> Expression

-- | All kind of literals
Literal :: Lit -> Expression

-- | A StatementExpression that is in an Expression position
ExprExprStmt :: StmtExpr -> Expression
Cast :: Type -> Expression -> Expression

-- | <a>Statement</a> is dual to <a>Expression</a> since it does not
--   evaluate to a value
data Statement
While :: Expression -> Maybe Statement -> Statement
[$sel:getCond:While] :: Statement -> Expression
[$sel:getBody:While] :: Statement -> Maybe Statement
If :: Expression -> Maybe Statement -> Maybe Statement -> Statement
[$sel:getCond:While] :: Statement -> Expression
[$sel:getThenStmt:While] :: Statement -> Maybe Statement
[$sel:getElseStmt:While] :: Statement -> Maybe Statement
Block :: [Statement] -> Statement
Return :: (Maybe Expression) -> Statement
LocalVar :: VarDecl -> Statement
StmtExprStmt :: StmtExpr -> Statement

-- | <a>StmtExpr</a> can be a <a>Statement</a> as well as an
--   <a>Expression</a>
data StmtExpr
Assign :: AssignOp -> Name -> Expression -> StmtExpr

-- | Using new
Instantiation :: Name -> [Expression] -> StmtExpr
Apply :: Expression -> [Expression] -> StmtExpr

-- | UnOp that returns something and has a side effect
SEUnOp :: IncrOrDecr -> Expression -> StmtExpr

-- | <a>Lit</a> are the Java literals
data Lit
IntegerL :: Integer -> Lit
BooleanL :: Bool -> Lit
CharL :: Char -> Lit
StringL :: String -> Lit
Null :: Lit

-- | <a>AssignOp</a> represent different ways to assign a value
data AssignOp
NormalAssign :: AssignOp
MultiplyAssign :: AssignOp
DivideAssign :: AssignOp
ModuloAssign :: AssignOp
PlusAssign :: AssignOp
MinusAssign :: AssignOp
ShiftLeftAssign :: AssignOp
SignedShiftRightAssign :: AssignOp
USignedShiftRightAssign :: AssignOp
AndAssign :: AssignOp
XOrAssign :: AssignOp
OrAssign :: AssignOp

-- | <a>BinOp</a> are all primitive binary operations
data BinOp
And :: BinOp
Or :: BinOp
XOr :: BinOp
Eq :: BinOp
Less :: BinOp
LessEq :: BinOp
Greater :: BinOp
GreaterEq :: BinOp
InstanceOf :: BinOp
Multiply :: BinOp
Divide :: BinOp
Add :: BinOp
Subtract :: BinOp
Modulo :: BinOp

-- | <a>UnOp</a> are all primitive unary operations
data UnOp
Not :: UnOp
Neg :: UnOp

-- | Tilde-Operator performs a bitwise complement
BitCompl :: UnOp

-- | <a>IncrOrDecr</a> represent different ways of increment/decrement a
--   field in an effectful way
data IncrOrDecr
PreIncr :: IncrOrDecr
PostIncr :: IncrOrDecr
PreDecr :: IncrOrDecr
PostDecr :: IncrOrDecr
instance GHC.Classes.Eq Compiler.Ast.Class
instance GHC.Show.Show Compiler.Ast.Class
instance GHC.Classes.Eq Compiler.Ast.Decl
instance GHC.Show.Show Compiler.Ast.Decl
instance GHC.Classes.Eq Compiler.Ast.Statement
instance GHC.Show.Show Compiler.Ast.Statement
instance GHC.Classes.Eq Compiler.Ast.VarDecl
instance GHC.Show.Show Compiler.Ast.VarDecl
instance GHC.Classes.Eq Compiler.Ast.Expression
instance GHC.Show.Show Compiler.Ast.Expression
instance GHC.Classes.Eq Compiler.Ast.StmtExpr
instance GHC.Show.Show Compiler.Ast.StmtExpr
instance GHC.Classes.Eq Compiler.Ast.IncrOrDecr
instance GHC.Show.Show Compiler.Ast.IncrOrDecr
instance GHC.Classes.Eq Compiler.Ast.UnOp
instance GHC.Show.Show Compiler.Ast.UnOp
instance GHC.Classes.Eq Compiler.Ast.BinOp
instance GHC.Show.Show Compiler.Ast.BinOp
instance GHC.Classes.Eq Compiler.Ast.AssignOp
instance GHC.Show.Show Compiler.Ast.AssignOp
instance GHC.Classes.Eq Compiler.Ast.Lit
instance GHC.Show.Show Compiler.Ast.Lit
instance GHC.Classes.Eq Compiler.Ast.Mod
instance GHC.Show.Show Compiler.Ast.Mod
instance GHC.Classes.Eq Compiler.Ast.Type
instance GHC.Show.Show Compiler.Ast.Type
instance GHC.Classes.Eq Compiler.Ast.PType
instance GHC.Show.Show Compiler.Ast.PType
instance GHC.Classes.Eq Compiler.Ast.Name
instance GHC.Show.Show Compiler.Ast.Name
instance GHC.Classes.Eq Compiler.Ast.Identifier
instance GHC.Show.Show Compiler.Ast.Identifier


-- | This module contains the complete parser
module Compiler.Parser

-- | <a>parseTest</a> parses a String, which contains multiple classes
parseTestString :: String -> Maybe [Class]

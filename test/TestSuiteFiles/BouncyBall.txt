class BouncyBall{   
	
    /*
    This is a test game to test functionalities.
    It uses a rng function to create a pseudo random gameworld.
    The Player is a sentient rubber ball, who wants to jump the highest of all the balls.
    It can choose to bounce on the same level and charge power or bounce a little less each bounce and charge double power. 
    It can release the power and reach a bigger height.
    There is a chance that it hits a flying object, like a bird or an airplane and looses some height and all the charged power.
    When it bounces less the chance of it hitting an object are reduced significantly.
    
    All the Input is realised with a call of the rng Function.
    */
	
	/*Rng value*/
	int rng; 
	
    /*Simulated Input*/
	char input;
	
    /*GameStates: bouncing(same height) 's', bouncing(lower height) 'l', release power 'r'*/
	char gameState;
	
    /*Ball Variables*/
	int height;
	int chargedPower; 
	
	/*World Vars*/
	int hitObjectChance;
	
	BouncyBall(){
		int i = 50; 
		while(i > 0) {
			i = i - 1; 
			nextRandomNumber();
		}
		gameState = 's';
		height = 50;
		chargedPower = 0;
		hitObjectChance = 65535/5;  
		input = 's';
		mainLoop();
	} 
	
	void mainLoop(){
		boolean running = true;
		while(running){
			nextRandomNumber();
			if(rng < 65535/3)
				input = 's'; 
			else if(rng < 65535*2/3)
				input = 'l'; 
			else 
			input = 'r';  
			
			if(gameState ==  's') {
				chargedPower += 10 + height/4;
				hitObjectChance = 65535/5; 
				gameState = input;
			}else if(gameState == 'l') {
				chargedPower += 10 + height/10;
				hitObjectChance = 65535/10; 
				height = height*5/6;
				gameState = input;
			}else if(gameState == 'r') {
				height += chargedPower;
				chargedPower = 0;
				hitObjectChance = 65535/5;  
				gameState = input;
			} 
			
			if(chargedPower > 10000)
				gameState = 'r'; 
			
			nextRandomNumber();
			if(rng < hitObjectChance){
				nextRandomNumber();
				if(rng < 65535/3)
					height = height * 5/6;  
				else if(rng < 65535*2/3)
					height = height  * 3/4; 
				else 
					height = height  * 1/2;  
			} 
			
			nextRandomNumber();
			if(rng < 65535/150){
				running = false;
			}
		}
	}
			
	int nextRandomNumber(){
		rng = rngFunction(rng);
		return rng;
	}    
			
	int rngFunction(int input){
		int s0 = (input << 8); 
		s0 ^= input;
		input = ((s0 & 255) << 8) | ((s0 & 65280) >>> 8);
		s0 = (s0 << 1) ^ input;
		int s1 = (s0 >>> 1) ^ 65408;
		if((s0 & 1) == 0){
			if(s1 == 43605) 
				input = 0;
			else 
				input = s1^8180;
		}else 
			input = s1 ^33152;
		return input & 65535;
	}
}

Ast: 
Just [
			Class (Identifier "BouncyBall") 
			[] 
			[Field (
				VarDecl {
					getIdentifier = Identifier "rng", 
					getMods = [], 
					getType = PrimType Int, 
					getRHS = Nothing}),
			Field (
				VarDecl {
					getIdentifier = Identifier "input", 
					getMods = [], 
					getType = PrimType Char, 
					getRHS = Nothing}),
			Field (
				VarDecl {
					getIdentifier = Identifier "gameState", 
					getMods = [], 
					getType = PrimType Char, 
					getRHS = Nothing}),
			Field (
				VarDecl {
					getIdentifier = Identifier "height", 
					getMods = [], 
					getType = PrimType Int, 
					getRHS = Nothing}),
			Field (
				VarDecl {
					getIdentifier = Identifier "chargedPower", 
					getMods = [], 
					getType = PrimType Int, 
					getRHS = Nothing}),
			Field (
				VarDecl {
					getIdentifier = Identifier "hitObjectChance", 
					getMods = [], 
					getType = PrimType Int, 
					getRHS = Nothing}),
			Constructor {
				getIdentifier = Identifier "BouncyBall", 
				getMods = [], 
				getParamList = [], 
				getBody = Just 
							(Block [
								LocalVar (
									VarDecl {
										getIdentifier = Identifier "i", 
										getMods = [], 
										getType = PrimType Int, 
										getRHS = Just (Literal (IntegerL 50))}),
								While {
									getCond = PrimBinOp Greater (Iden (Name {path = [], getIdentifier = Identifier "i"})) (Literal (IntegerL 0)), 
									getBody = Just (Block [
										StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "i"}) 
														(PrimBinOp Subtract (Iden (Name {path = [], getIdentifier = Identifier "i"})) (Literal (IntegerL 1)))),
										StmtExprStmt (Apply (Iden (Name {path = [], getIdentifier = Identifier "nextRandomNumber"})) [])])},
								StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "gameState"}) (Literal (CharL 's'))),
								StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "height"}) (Literal (IntegerL 50))),
								StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "chargedPower"}) (Literal (IntegerL 0))),
								StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "hitObjectChance"}) (PrimBinOp Divide (Literal (IntegerL 65535)) (Literal (IntegerL 5)))),
								StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "input"}) (Literal (CharL 's'))),
								StmtExprStmt (Apply (Iden (Name {path = [], getIdentifier = Identifier "mainLoop"})) [])])},
			Method {
				getIdentifier = Identifier "mainLoop", 
				getMods = [], 
				getReturnType = JVoid, 
				getParamList = [], 
				getBody = 
					Just (
						Block [
							LocalVar (
								VarDecl {
									getIdentifier = Identifier "running", 
									getMods = [], 
									getType = PrimType Boolean, 
									getRHS = Just (Literal (BooleanL True))}),
							While {
								getCond = Iden (Name {path = [], getIdentifier = Identifier "running"}), 
								getBody = Just (Block [
												StmtExprStmt (Apply (Iden (Name {path = [], getIdentifier = Identifier "nextRandomNumber"})) []),
												If {
													getCond = PrimBinOp Less (Iden (Name {path = [], getIdentifier = Identifier "rng"})) (PrimBinOp Divide (Literal (IntegerL 65535)) (Literal (IntegerL 3))), 
													getThenStmt = Just (
														StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "input"}) (Literal (CharL 's')))), 
														getElseStmt = Just (
															If {
																getCond = PrimBinOp Less (Iden (Name {path = [], getIdentifier = Identifier "rng"})) (PrimBinOp Divide (PrimBinOp Multiply (Literal (IntegerL 65535)) (Literal (IntegerL 2))) (Literal (IntegerL 3))), 
																getThenStmt = Just (StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "input"}) (Literal (CharL 'l')))), 
																getElseStmt = Just (StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "input"}) (Literal (CharL 'r'))))})},
												If {
													getCond = PrimBinOp Eq (Iden (Name {path = [], getIdentifier = Identifier "gameState"})) (Literal (CharL 's')), 
													getThenStmt = Just (Block [
														StmtExprStmt (Assign PlusAssign (Name {path = [], getIdentifier = Identifier "chargedPower"}) (PrimBinOp Add (Literal (IntegerL 10)) (PrimBinOp Divide (Iden (Name {path = [], getIdentifier = Identifier "height"})) (Literal (IntegerL 4))))),
														StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "hitObjectChance"}) (PrimBinOp Divide (Literal (IntegerL 65535)) (Literal (IntegerL 5)))),
														StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "gameState"}) (Iden (Name {path = [], getIdentifier = Identifier "input"})))]), 
													getElseStmt = Just (
														If {
															getCond = PrimBinOp Eq (Iden (Name {path = [], getIdentifier = Identifier "gameState"})) (Literal (CharL 'l')), 
															getThenStmt = Just (Block [
																StmtExprStmt (Assign PlusAssign (Name {path = [], getIdentifier = Identifier "chargedPower"}) (PrimBinOp Add (Literal (IntegerL 10)) (PrimBinOp Divide (Iden (Name {path = [], getIdentifier = Identifier "height"})) (Literal (IntegerL 10))))),
																StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "hitObjectChance"}) (PrimBinOp Divide (Literal (IntegerL 65535)) (Literal (IntegerL 10)))),
																StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "height"}) (PrimBinOp Divide (PrimBinOp Multiply (Iden (Name {path = [], getIdentifier = Identifier "height"})) (Literal (IntegerL 5))) (Literal (IntegerL 6)))),
																StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "gameState"}) (Iden (Name {path = [], getIdentifier = Identifier "input"})))]), 
															getElseStmt = Just (
																If {
																	getCond = PrimBinOp Eq (Iden (Name {path = [], getIdentifier = Identifier "gameState"})) (Literal (CharL 'r')), 
																	getThenStmt = Just (Block [
																		StmtExprStmt (Assign PlusAssign (Name {path = [], getIdentifier = Identifier "height"}) (Iden (Name {path = [], getIdentifier = Identifier "chargedPower"}))),
																		StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "chargedPower"}) (Literal (IntegerL 0))),
																		StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "hitObjectChance"}) (PrimBinOp Divide (Literal (IntegerL 65535)) (Literal (IntegerL 5)))),
																		StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "gameState"}) (Iden (Name {path = [], getIdentifier = Identifier "input"})))]), 
																	getElseStmt = Nothing})})},
												If {
													getCond = PrimBinOp Greater (Iden (Name {path = [], getIdentifier = Identifier "chargedPower"})) (Literal (IntegerL 10000)), 
													getThenStmt = Just (StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "gameState"}) (Literal (CharL 'r')))), 
													getElseStmt = Nothing},
												StmtExprStmt (Apply (Iden (Name {path = [], getIdentifier = Identifier "nextRandomNumber"})) []),
												If {
													getCond = PrimBinOp Less (Iden (Name {path = [], getIdentifier = Identifier "rng"})) (Iden (Name {path = [], getIdentifier = Identifier "hitObjectChance"})), 
													getThenStmt = Just (Block [
														StmtExprStmt (Apply (Iden (Name {path = [], getIdentifier = Identifier "nextRandomNumber"})) []),
														If {
															getCond = PrimBinOp Less (Iden (Name {path = [], getIdentifier = Identifier "rng"})) (PrimBinOp Divide (Literal (IntegerL 65535)) (Literal (IntegerL 3))), 
															getThenStmt = Just (StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "height"}) (PrimBinOp Divide (PrimBinOp Multiply (Iden (Name {path = [], getIdentifier = Identifier "height"})) (Literal (IntegerL 5))) (Literal (IntegerL 6))))), 
															getElseStmt = Just (If {
																getCond = PrimBinOp Less (Iden (Name {path = [], getIdentifier = Identifier "rng"})) (PrimBinOp Divide (PrimBinOp Multiply (Literal (IntegerL 65535)) (Literal (IntegerL 2))) (Literal (IntegerL 3))), 
																getThenStmt = Just (StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "height"}) (PrimBinOp Divide (PrimBinOp Multiply (Iden (Name {path = [], getIdentifier = Identifier "height"})) (Literal (IntegerL 3))) (Literal (IntegerL 4))))), 
																getElseStmt = Just (StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "height"}) (PrimBinOp Divide (PrimBinOp Multiply (Iden (Name {path = [], getIdentifier = Identifier "height"})) (Literal (IntegerL 1))) (Literal (IntegerL 2)))))})}]), 
													getElseStmt = Nothing},
												StmtExprStmt (Apply (Iden (Name {path = [], getIdentifier = Identifier "nextRandomNumber"})) []),
												If {
													getCond = PrimBinOp Less (Iden (Name {path = [], getIdentifier = Identifier "rng"})) (PrimBinOp Divide (Literal (IntegerL 65535)) (Literal (IntegerL 150))), 
													getThenStmt = Just (Block [StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "running"}) (Literal (BooleanL False)))]), 
													getElseStmt = Nothing}])}])},
			Method {
				getIdentifier = Identifier "nextRandomNumber", 
				getMods = [], 
				getReturnType = PrimType Int, 
				getParamList = [], 
				getBody = Just (Block [
					StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "rng"}) (ExprExprStmt (Apply (Iden (Name {path = [], getIdentifier = Identifier "rngFunction"})) [Iden (Name {path = [], getIdentifier = Identifier "rng"})]))),
					Return (Just (Iden (Name {path = [], getIdentifier = Identifier "rng"})))])},
			Method {
				getIdentifier = Identifier "rngFunction", 
				getMods = [], 
				getReturnType = PrimType Int, 
				getParamList = [(PrimType Int,Identifier "input")], 
				getBody = Just (Block [
					LocalVar (
						VarDecl {
							getIdentifier = Identifier "s0", 
							getMods = [], 
							getType = PrimType Int, 
							getRHS = Just (PrimBinOp ShiftLeft (Iden (Name {path = [], getIdentifier = Identifier "input"})) (Literal (IntegerL 8)))}),
					StmtExprStmt (Assign BitXOrAssign (Name {path = [], getIdentifier = Identifier "s0"}) (Iden (Name {path = [], getIdentifier = Identifier "input"}))),
					StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "input"}) (PrimBinOp BitOr (PrimBinOp ShiftLeft (PrimBinOp BitAnd (Iden (Name {path = [], getIdentifier = Identifier "s0"})) (Literal (IntegerL 255))) (Literal (IntegerL 8))) (PrimBinOp UnsignedShiftRight (PrimBinOp BitAnd (Iden (Name {path = [], getIdentifier = Identifier "s0"})) (Literal (IntegerL 65280))) (Literal (IntegerL 8))))),
					StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "s0"}) (PrimBinOp BitXOr (PrimBinOp ShiftLeft (Iden (Name {path = [], getIdentifier = Identifier "s0"})) (Literal (IntegerL 1))) (Iden (Name {path = [], getIdentifier = Identifier "input"})))),
					LocalVar (
						VarDecl {
							getIdentifier = Identifier "s1", 
							getMods = [], 
							getType = PrimType Int, 
							getRHS = Just (PrimBinOp BitXOr (PrimBinOp UnsignedShiftRight (Iden (Name {path = [], getIdentifier = Identifier "s0"})) (Literal (IntegerL 1))) (Literal (IntegerL 65408)))}),
					If {
						getCond = PrimBinOp Eq (PrimBinOp BitAnd (Iden (Name {path = [], getIdentifier = Identifier "s0"})) (Literal (IntegerL 1))) (Literal (IntegerL 0)), 
						getThenStmt = Just (Block [
							If {
								getCond = PrimBinOp Eq (Iden (Name {path = [], getIdentifier = Identifier "s1"})) (Literal (IntegerL 43605)), 
								getThenStmt = Just (StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "input"}) (Literal (IntegerL 0)))), 
								getElseStmt = Just (StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "input"}) (PrimBinOp BitXOr (Iden (Name {path = [], getIdentifier = Identifier "s1"})) (Literal (IntegerL 8180)))))}]), 
						getElseStmt = Just (StmtExprStmt (Assign NormalAssign (Name {path = [], getIdentifier = Identifier "input"}) (PrimBinOp BitXOr (Iden (Name {path = [], getIdentifier = Identifier "s1"})) (Literal (IntegerL 33152)))))},
					Return (Just (PrimBinOp BitAnd (Iden (Name {path = [], getIdentifier = Identifier "input"})) (Literal (IntegerL 65535))))])}]]
					
	javapAByte:
	class BouncyBall
  minor version: 0
  major version: 52
  flags: ACC_SUPER
Constant pool:
   #1 = Methodref          #18.#40        // java/lang/Object."<init>":()V
   #2 = Methodref          #17.#41        // BouncyBall.nextRandomNumber:()I
   #3 = Fieldref           #17.#42        // BouncyBall.gameState:C
   #4 = Fieldref           #17.#43        // BouncyBall.height:I
   #5 = Fieldref           #17.#44        // BouncyBall.chargedPower:I
   #6 = Fieldref           #17.#45        // BouncyBall.hitObjectChance:I
   #7 = Fieldref           #17.#46        // BouncyBall.input:C
   #8 = Methodref          #17.#47        // BouncyBall.mainLoop:()V
   #9 = Fieldref           #17.#48        // BouncyBall.rng:I
  #10 = Integer            43690
  #11 = Methodref          #17.#49        // BouncyBall.rngFunction:(I)I
  #12 = Integer            65280
  #13 = Integer            65408
  #14 = Integer            43605
  #15 = Integer            33152
  #16 = Integer            65535
  #17 = Class              #50            // BouncyBall
  #18 = Class              #51            // java/lang/Object
  #19 = Utf8               rng
  #20 = Utf8               I
  #21 = Utf8               input
  #22 = Utf8               C
  #23 = Utf8               gameState
  #24 = Utf8               height
  #25 = Utf8               chargedPower
  #26 = Utf8               hitObjectChance
  #27 = Utf8               <init>
  #28 = Utf8               ()V
  #29 = Utf8               Code
  #30 = Utf8               LineNumberTable
  #31 = Utf8               StackMapTable
  #32 = Class              #50            // BouncyBall
  #33 = Utf8               mainLoop
  #34 = Utf8               nextRandomNumber
  #35 = Utf8               ()I
  #36 = Utf8               rngFunction
  #37 = Utf8               (I)I
  #38 = Utf8               SourceFile
  #39 = Utf8               BouncyBall.java
  #40 = NameAndType        #27:#28        // "<init>":()V
  #41 = NameAndType        #34:#35        // nextRandomNumber:()I
  #42 = NameAndType        #23:#22        // gameState:C
  #43 = NameAndType        #24:#20        // height:I
  #44 = NameAndType        #25:#20        // chargedPower:I
  #45 = NameAndType        #26:#20        // hitObjectChance:I
  #46 = NameAndType        #21:#22        // input:C
  #47 = NameAndType        #33:#28        // mainLoop:()V
  #48 = NameAndType        #19:#20        // rng:I
  #49 = NameAndType        #36:#37        // rngFunction:(I)I
  #50 = Utf8               BouncyBall
  #51 = Utf8               java/lang/Object
{
  int rng;
    descriptor: I
    flags:

  char input;
    descriptor: C
    flags:

  char gameState;
    descriptor: C
    flags:

  int height;
    descriptor: I
    flags:

  int chargedPower;
    descriptor: I
    flags:

  int hitObjectChance;
    descriptor: I
    flags:

  BouncyBall();
    descriptor: ()V
    flags:
    Code:
      stack=2, locals=2, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: bipush        50
         6: istore_1
         7: iload_1
         8: ifle          23
        11: iload_1
        12: iconst_1
        13: isub
        14: istore_1
        15: aload_0
        16: invokevirtual #2                  // Method nextRandomNumber:()I
        19: pop
        20: goto          7
        23: aload_0
        24: bipush        115
        26: putfield      #3                  // Field gameState:C
        29: aload_0
        30: bipush        50
        32: putfield      #4                  // Field height:I
        35: aload_0
        36: iconst_0
        37: putfield      #5                  // Field chargedPower:I
        40: aload_0
        41: sipush        13107
        44: putfield      #6                  // Field hitObjectChance:I
        47: aload_0
        48: bipush        115
        50: putfield      #7                  // Field input:C
        53: aload_0
        54: invokevirtual #8                  // Method mainLoop:()V
        57: return
      LineNumberTable:
        line 31: 0
        line 32: 4
        line 33: 7
        line 34: 11
        line 35: 15
        line 37: 23
        line 38: 29
        line 39: 35
        line 40: 40
        line 41: 47
        line 42: 53
        line 43: 57
      StackMapTable: number_of_entries = 2
        frame_type = 255 /* full_frame */
          offset_delta = 7
          locals = [ class BouncyBall, int ]
          stack = []
        frame_type = 15 /* same */

  void mainLoop();
    descriptor: ()V
    flags:
    Code:
      stack=5, locals=2, args_size=1
         0: iconst_1
         1: istore_1
         2: iload_1
         3: ifeq          319
         6: aload_0
         7: invokevirtual #2                  // Method nextRandomNumber:()I
        10: pop
        11: aload_0
        12: getfield      #9                  // Field rng:I
        15: sipush        21845
        18: if_icmpge     30
        21: aload_0
        22: bipush        115
        24: putfield      #7                  // Field input:C
        27: goto          54
        30: aload_0
        31: getfield      #9                  // Field rng:I
        34: ldc           #10                 // int 43690
        36: if_icmpge     48
        39: aload_0
        40: bipush        108
        42: putfield      #7                  // Field input:C
        45: goto          54
        48: aload_0
        49: bipush        114
        51: putfield      #7                  // Field input:C
        54: aload_0
        55: getfield      #3                  // Field gameState:C
        58: bipush        115
        60: if_icmpne     99
        63: aload_0
        64: dup
        65: getfield      #5                  // Field chargedPower:I
        68: bipush        10
        70: aload_0
        71: getfield      #4                  // Field height:I
        74: iconst_4
        75: idiv
        76: iadd
        77: iadd
        78: putfield      #5                  // Field chargedPower:I
        81: aload_0
        82: sipush        13107
        85: putfield      #6                  // Field hitObjectChance:I
        88: aload_0
        89: aload_0
        90: getfield      #7                  // Field input:C
        93: putfield      #3                  // Field gameState:C
        96: goto          200
        99: aload_0
       100: getfield      #3                  // Field gameState:C
       103: bipush        108
       105: if_icmpne     158
       108: aload_0
       109: dup
       110: getfield      #5                  // Field chargedPower:I
       113: bipush        10
       115: aload_0
       116: getfield      #4                  // Field height:I
       119: bipush        10
       121: idiv
       122: iadd
       123: iadd
       124: putfield      #5                  // Field chargedPower:I
       127: aload_0
       128: sipush        6553
       131: putfield      #6                  // Field hitObjectChance:I
       134: aload_0
       135: aload_0
       136: getfield      #4                  // Field height:I
       139: iconst_5
       140: imul
       141: bipush        6
       143: idiv
       144: putfield      #4                  // Field height:I
       147: aload_0
       148: aload_0
       149: getfield      #7                  // Field input:C
       152: putfield      #3                  // Field gameState:C
       155: goto          200
       158: aload_0
       159: getfield      #3                  // Field gameState:C
       162: bipush        114
       164: if_icmpne     200
       167: aload_0
       168: dup
       169: getfield      #4                  // Field height:I
       172: aload_0
       173: getfield      #5                  // Field chargedPower:I
       176: iadd
       177: putfield      #4                  // Field height:I
       180: aload_0
       181: iconst_0
       182: putfield      #5                  // Field chargedPower:I
       185: aload_0
       186: sipush        13107
       189: putfield      #6                  // Field hitObjectChance:I
       192: aload_0
       193: aload_0
       194: getfield      #7                  // Field input:C
       197: putfield      #3                  // Field gameState:C
       200: aload_0
       201: getfield      #5                  // Field chargedPower:I
       204: sipush        10000
       207: if_icmple     216
       210: aload_0
       211: bipush        114
       213: putfield      #3                  // Field gameState:C
       216: aload_0
       217: invokevirtual #2                  // Method nextRandomNumber:()I
       220: pop
       221: aload_0
       222: getfield      #9                  // Field rng:I
       225: aload_0
       226: getfield      #6                  // Field hitObjectChance:I
       229: if_icmpge     299
       232: aload_0
       233: invokevirtual #2                  // Method nextRandomNumber:()I
       236: pop
       237: aload_0
       238: getfield      #9                  // Field rng:I
       241: sipush        21845
       244: if_icmpge     263
       247: aload_0
       248: aload_0
       249: getfield      #4                  // Field height:I
       252: iconst_5
       253: imul
       254: bipush        6
       256: idiv
       257: putfield      #4                  // Field height:I
       260: goto          299
       263: aload_0
       264: getfield      #9                  // Field rng:I
       267: ldc           #10                 // int 43690
       269: if_icmpge     287
       272: aload_0
       273: aload_0
       274: getfield      #4                  // Field height:I
       277: iconst_3
       278: imul
       279: iconst_4
       280: idiv
       281: putfield      #4                  // Field height:I
       284: goto          299
       287: aload_0
       288: aload_0
       289: getfield      #4                  // Field height:I
       292: iconst_1
       293: imul
       294: iconst_2
       295: idiv
       296: putfield      #4                  // Field height:I
       299: aload_0
       300: invokevirtual #2                  // Method nextRandomNumber:()I
       303: pop
       304: aload_0
       305: getfield      #9                  // Field rng:I
       308: sipush        436
       311: if_icmpge     2
       314: iconst_0
       315: istore_1
       316: goto          2
       319: return
      LineNumberTable:
        line 46: 0
        line 47: 2
        line 48: 6
        line 49: 11
        line 50: 21
        line 51: 30
        line 52: 39
        line 54: 48
        line 56: 54
        line 57: 63
        line 58: 81
        line 59: 88
        line 60: 99
        line 61: 108
        line 62: 127
        line 63: 134
        line 64: 147
        line 65: 158
        line 66: 167
        line 67: 180
        line 68: 185
        line 69: 192
        line 72: 200
        line 73: 210
        line 75: 216
        line 76: 221
        line 77: 232
        line 78: 237
        line 79: 247
        line 80: 263
        line 81: 272
        line 83: 287
        line 86: 299
        line 87: 304
        line 88: 314
        line 91: 319
      StackMapTable: number_of_entries = 12
        frame_type = 252 /* append */
          offset_delta = 2
          locals = [ int ]
        frame_type = 27 /* same */
        frame_type = 17 /* same */
        frame_type = 5 /* same */
        frame_type = 44 /* same */
        frame_type = 58 /* same */
        frame_type = 41 /* same */
        frame_type = 15 /* same */
        frame_type = 46 /* same */
        frame_type = 23 /* same */
        frame_type = 11 /* same */
        frame_type = 19 /* same */

  int nextRandomNumber();
    descriptor: ()I
    flags:
    Code:
      stack=3, locals=1, args_size=1
         0: aload_0
         1: aload_0
         2: aload_0
         3: getfield      #9                  // Field rng:I
         6: invokevirtual #11                 // Method rngFunction:(I)I
         9: putfield      #9                  // Field rng:I
        12: aload_0
        13: getfield      #9                  // Field rng:I
        16: ireturn
      LineNumberTable:
        line 94: 0
        line 95: 12

  int rngFunction(int);
    descriptor: (I)I
    flags:
    Code:
      stack=3, locals=4, args_size=2
         0: iload_1
         1: bipush        8
         3: ishl
         4: istore_2
         5: iload_2
         6: iload_1
         7: ixor
         8: istore_2
         9: iload_2
        10: sipush        255
        13: iand
        14: bipush        8
        16: ishl
        17: iload_2
        18: ldc           #12                 // int 65280
        20: iand
        21: bipush        8
        23: iushr
        24: ior
        25: istore_1
        26: iload_2
        27: iconst_1
        28: ishl
        29: iload_1
        30: ixor
        31: istore_2
        32: iload_2
        33: iconst_1
        34: iushr
        35: ldc           #13                 // int 65408
        37: ixor
        38: istore_3
        39: iload_2
        40: iconst_1
        41: iand
        42: ifne          65
        45: iload_3
        46: ldc           #14                 // int 43605
        48: if_icmpne     56
        51: iconst_0
        52: istore_1
        53: goto          70
        56: iload_3
        57: sipush        8180
        60: ixor
        61: istore_1
        62: goto          70
        65: iload_3
        66: ldc           #15                 // int 33152
        68: ixor
        69: istore_1
        70: iload_1
        71: ldc           #16                 // int 65535
        73: iand
        74: ireturn
      LineNumberTable:
        line 99: 0
        line 100: 5
        line 101: 9
        line 102: 26
        line 103: 32
        line 104: 39
        line 105: 45
        line 106: 51
        line 108: 56
        line 110: 65
        line 111: 70
      StackMapTable: number_of_entries = 3
        frame_type = 253 /* append */
          offset_delta = 56
          locals = [ int, int ]
        frame_type = 8 /* same */
        frame_type = 4 /* same */
}
SourceFile: "BouncyBall.java"